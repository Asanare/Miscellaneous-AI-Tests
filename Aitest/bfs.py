import queue
def matrix_to_dict(width, height):
    graph = {}
    coordinates = [(x, y) for x in range(width) for y in range(height)]
    for coords in coordinates:
        row = coords[0]
        column = coords[1]
        if row+1 > width-1:
            right = None
        else:
            right = ((row+1,column))
        if row-1 < 0:
            left = None
        else:
            left = ((row-1, column))
        if column+1 > height-1:
            above = None
        else:
            above = ((row, column + 1))
        if column-1 < 0:
            below = None
        else:
            below = ((row, column - 1))
        neighbours = [right, left, above, below]
        neighbours = [x for x in neighbours if x != None]
        graph[(row,column)] = set(neighbours)
    return (graph)
##graph = {(7, 3): {(6, 3), (7, 4), (8, 3), (7, 2)}, (6, 9): {(5, 9),
##    (6, 10), (6, 8), (7, 9)}, (1, 3): {(1, 2), (0, 3), (2, 3), (1, 4)},
##    (4, 8): {(3, 8), (4, 7), (4, 9), (5, 8)}, (3, 0): {(2, 0), (3, 1),
##    (4, 0)}, (2, 8): {(3, 8), (2, 7), (1, 8), (2, 9)}, (9, 8): {(10, 8),
##    (8, 8), (9, 9), (9, 7)}, (8, 0): {(8, 1), (9, 0), (7, 0)}, (0, 7):
##    {(0, 6), (0, 8), (1, 7)}, (6, 2): {(6, 3), (6, 1), (5, 2), (7, 2)},
##    (1, 6): {(0, 6), (1, 5), (2, 6), (1, 7)}, (3, 7): {(2, 7), (3, 8),
##    (4, 7), (3, 6)}, (2, 5): {(1, 5), (2, 6), (2, 4), (3, 5)}, (8, 5):
##    {(9, 5), (8, 6), (7, 5), (8, 4)}, (5, 8): {(5, 9), (5, 7), (6, 8),
##    (4, 8)}, (4, 0): {(3, 0), (4, 1), (5, 0)}, (9, 0): {(10, 0), (8, 0),
##    (9, 1)}, (6, 7): {(5, 7), (7, 7), (6, 8), (6, 6)}, (5, 5): {(4, 5),
##    (5, 6), (5, 4), (6, 5)}, (7, 6): {(8, 6), (7, 5), (7, 7), (6, 6)},
##    (5, 0): {(5, 1), (6, 0), (4, 0)}, (0, 4): {(0, 3), (0, 5), (1, 4)},
##    (3, 5): {(4, 5), (2, 5), (3, 4), (3, 6)}, (1, 1): {(0, 1), (1, 2),
##    (1, 0), (2, 1)}, (3, 2): {(4, 2), (3, 1), (3, 3), (2, 2)}, (2, 6):
##    {(2, 7), (2, 5), (1, 6), (3, 6)}, (8, 2): {(9, 2), (8, 1), (8, 3),
##    (7, 2)}, (4, 5): {(4, 4), (5, 5), (4, 6), (3, 5)}, (9, 3): {(9, 2),
##    (8, 3), (10, 3), (9, 4)}, (6, 0): {(6, 1), (7, 0), (5, 0)}, (1, 4):
##    {(1, 5), (1, 3), (2, 4), (0, 4)}, (7, 5): {(7, 4), (7, 6), (8, 5),
##    (6, 5)}, (2, 3): {(1, 3), (3, 3), (2, 4), (2, 2)}, (1, 9): {(0, 9),
##    (1, 10), (1, 8), (2, 9)}, (8, 7): {(8, 6), (8, 8), (7, 7), (9, 7)},
##    (4, 2): {(3, 2), (5, 2), (4, 1), (4, 3)}, (9, 6): {(8, 6), (9, 5),
##    (10, 6), (9, 7)}, (6, 5): {(6, 4), (7, 5), (5, 5), (6, 6)}, (5, 3):
##    {(6, 3), (5, 4), (5, 2), (4, 3)}, (0, 1): {(0, 0), (1, 1), (0, 2)},
##    (7, 0): {(8, 0), (6, 0), (7, 1)}, (6, 8): {(6, 9), (7, 8), (6, 7),
##    (5, 8)}, (3, 1): {(3, 0), (3, 2), (4, 1), (2, 1)}, (9, 9): {(8, 9),
##    (9, 10), (9, 8), (10, 9)}, (0, 6): {(1, 6), (0, 5), (0, 7)}, (1, 7):
##    {(2, 7), (1, 8), (1, 6), (0, 7)}, (0, 9): {(0, 8), (1, 9), (0, 10)},
##    (7, 8): {(8, 8), (6, 8), (7, 7), (7, 9)}, (2, 4): {(2, 5), (3, 4),
##    (2, 3), (1, 4)}, (8, 4): {(7, 4), (8, 3), (8, 5), (9, 4)}, (5, 9):
##    {(6, 9), (4, 9), (5, 10), (5, 8)}, (4, 7): {(3, 7), (5, 7), (4, 6),
##    (4, 8)}, (9, 1): {(8, 1), (9, 2), (9, 0), (10, 1)}, (6, 6): {(5, 6),
##    (7, 6), (6, 7), (6, 5)}, (5, 6): {(5, 7), (4, 6), (5, 5), (6, 6)},
##    (7, 7): {(7, 6), (6, 7), (7, 8), (8, 7)}, (2, 1): {(2, 0), (3, 1),
##    (1, 1), (2, 2)}, (8, 9): {(8, 8), (9, 9), (8, 10), (7, 9)}, (9, 4):
##    {(9, 5), (9, 3), (10, 4), (8, 4)}, (5, 1): {(6, 1), (4, 1), (5, 2),
##    (5, 0)}, (0, 3): {(1, 3), (0, 2), (0, 4)}, (7, 2): {(7, 3), (6, 2),
##    (8, 2), (7, 1)}, (1, 2): {(1, 3), (0, 2), (1, 1), (2, 2)}, (3, 8):
##    {(2, 8), (3, 7), (3, 9), (4, 8)}, (4, 9): {(5, 9), (4, 10), (3, 9),
##    (4, 8)}, (3, 3): {(3, 2), (2, 3), (3, 4), (4, 3)}, (2, 9): {(2, 8),
##    (3, 9), (1, 9), (2, 10)}, (8, 1): {(8, 0), (9, 1), (8, 2), (7, 1)},
##    (4, 4): {(4, 5), (5, 4), (3, 4), (4, 3)}, (6, 3): {(7, 3), (6, 4),
##    (6, 2), (5, 3)}, (1, 5): {(2, 5), (0, 5), (1, 6), (1, 4)}, (8, 8):
##    {(8, 9), (9, 8), (7, 8), (8, 7)}, (3, 6): {(3, 7), (2, 6), (4, 6),
##    (3, 5)}, (2, 2): {(1, 2), (3, 2), (2, 3), (2, 1)}, (8, 6): {(7, 6),
##    (9, 6), (8, 5), (8, 7)}, (4, 1): {(5, 1), (4, 2), (3, 1), (4, 0)},
##    (9, 7): {(10, 7), (9, 8), (9, 6), (8, 7)}, (6, 4): {(7, 4), (6, 3),
##    (5, 4), (6, 5)}, (5, 4): {(6, 4), (4, 4), (5, 5), (5, 3)}, (0, 0):
##    {(0, 1)}, (7, 1): {(8, 1), (6, 1), (7, 0), (7, 2)}, (0, 5):
##    {(1, 5), (0, 6), (0, 4)}, (1, 0): {(2, 0), (0, 0), (1, 1)}, (0, 8):
##    {(0, 9), (1, 8), (0, 7)}, (7, 9): {(8, 9), (6, 9), (7, 8), (7, 10)},
##    (2, 7): {(3, 7), (2, 8), (2, 6), (1, 7)}, (8, 3): {(7, 3), (9, 3),
##    (8, 2), (8, 4)}, (4, 6): {(5, 6), (4, 5), (4, 7), (3, 6)}, (9, 2):
##    {(9, 3), (8, 2), (9, 1), (10, 2)}, (3, 4): {(4, 4), (2, 4), (3, 3),
##    (3, 5)}, (6, 1): {(5, 1), (6, 2), (6, 0), (7, 1)}, (5, 7): {(5, 6),
##    (4, 7), (6, 7), (5, 8)}, (7, 4): {(6, 4), (7, 3), (7, 5), (8, 4)},
##    (2, 0): {(3, 0), (1, 0), (2, 1)}, (1, 8): {(2, 8), (0, 8), (1, 9),
##    (1, 7)}, (3, 9): {(3, 8), (3, 10), (4, 9), (2, 9)}, (4, 3): {(4, 2),
##    (4, 4), (3, 3), (5, 3)}, (9, 5): {(10, 5), (8, 5), (9, 6), (9, 4)},
##    (5, 2): {(4, 2), (5, 1), (6, 2), (5, 3)}, (0, 2): {(1, 2), (0, 1),
##    (0, 3)}}
def bfs(graph, start, goal):
    q = queue.Queue()
    path = [start]
    q.put(path)
    visited = set([start])
    while not q.empty():
        path = q.get()
        last_node = path[-1]
        if last_node == goal:
            return path
        for node in graph[last_node]:
            if node not in visited:
                visited.add(node)
                q.put(path + [node])

